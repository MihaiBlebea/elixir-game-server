{"version":3,"sources":["lib/Box.js","lib/Entity.js","lib/BrickWall.js","lib/ConcreteWall.js","lib/Door.js","lib/Enemy.js","lib/Board.js","lib/Player.js","Level.js","Menu.js","index.js"],"names":["Box","contains","Array","isArray","_contains","entity","push","entityName","console","log","i","length","constructor","name","splice","lenght","entityList","undefined","hasEntity","module","exports","Entity","require","BrickWall","canBeDestroyed","isDestroyed","color","texture","ConcreteWall","Door","Enemy","Board","boardSize","_boardSize","_generateBoard","_generateLevel","_generateEnemies","x","y","_board","addEntity","_boxSize","empty","_emptyBoxes","_getRandomInt","box","emptyBoxes","count","Math","floor","index","position","getRandomEmptyBox","max","random","isEmpty","includes","Player","Level","Phaser","Scene","key","game","config","height","load","spritesheet","frameWidth","frameHeight","player","physics","add","sprite","renderLevel","collider","walls","event","anims","pause","setVelocityY","setVelocityX","setCollideWorldBounds","collides","create","frames","generateFrameNumbers","start","end","repeatw","frameRate","repeat","key_D","input","keyboard","addKey","Input","Keyboard","KeyCodes","D","key_A","A","key_S","S","key_W","W","key_space","SPACE","on","scene","delta","movePlayer","isDown","play","bomb","staticGroup","boxSize","getBoxSize","getBoardSize","getBoxAt","getTopEntity","_enemies","map","enemy","moves","Menu","text","font","type","AUTO","width","backgroundColor","default","arcade","gravity","debug","debugShowBody","debugShowStaticBody","Game"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["class Box\n{\n    _contains = []\n\n    constructor(contains) \n    {\n        if (Array.isArray(contains) === true) {\n            this._contains = contains\n        }\n    }\n\n    addEntity(entity) \n    {\n        this._contains.push(entity)\n    }\n\n    removeEntity(entityName)\n    {\n        console.log(entityName)\n        for (let i = 0; i < this._contains.length; i++) {\n            if (this._contains[i].constructor.name === entityName) {\n                this._contains.splice(i, 1)\n            }\n        }\n    }\n\n    hasEntity(entity)\n    {\n        if (typeof entity !== 'object'|| entity === null) {\n            return false\n        }\n\n        if (this._contains.lenght === 0) {\n            return false\n        }\n\n        let entityName = entity.constructor.name\n        for (let i = 0; i < this._contains.length; i++) {\n            if (this._contains[i].constructor.name === entityName) {\n                return true\n            }\n        }\n\n        return false\n    }\n\n    hasAnyEntity(entityList)\n    {\n        if (entityList === undefined) {\n            return this._contains.length > 0\n        }\n\n        for(let i = 0; i < entityList.length; i++) {\n            if(this.hasEntity(entityList[i]) === true) {\n                return true\n            }\n        }\n\n        return false\n    }\n\n    isEmpty() \n    {\n        return this._contains.length === 0\n    }\n\n    getTopEntity()\n    {\n        return this._contains[0]\n    }\n}\n\nmodule.exports = Box","class Entity\n{\n    isDestroyed = false\n\n    canBeDestroyed = false\n\n    color = '#fff'\n}\n\nmodule.exports = Entity","const Entity = require('./Entity')\n\nclass BrickWall extends Entity\n{\n    img = null\n\n    constructor() \n    {\n        super()\n\n        this.canBeDestroyed = true\n        this.isDestroyed    = false\n        this.color          = 'red'\n        this.texture        = 'brick-wall'\n    }\n}\n\nmodule.exports = BrickWall","const Entity = require('./Entity')\n\nclass ConcreteWall extends Entity\n{\n    constructor() {\n        super()\n\n        this.canBeDestroyed = false\n        this.isDestroyed    = false\n        this.color          = '#b3b3b3'\n        this.texture        = 'concrete-wall'\n    }\n}\n\nmodule.exports = ConcreteWall","const Entity = require('./Entity')\n\nclass Door extends Entity\n{\n    constructor() {\n        super()\n        \n        this.canBeDestroyed = false\n        this.isDestroyed    = false\n        this.color          = 'blue'\n        this.texture        = 'door'\n    }\n}\n\nmodule.exports = Door","const Entity = require('./Entity')\n\nclass Enemy extends Entity\n{\n    constructor()\n    {\n        super()\n\n        this.texture = 'enemy'\n    }\n}\n\n\nmodule.exports = Enemy","const Box          = require('./Box')\nconst BrickWall    = require('./BrickWall')\nconst ConcreteWall = require('./ConcreteWall')\nconst Door         = require('./Door')\nconst Enemy = require('./Enemy')\n\nclass Board \n{\n    _boxSize = 40\n\n    _boardSize = 20\n\n    _board = {}\n\n    constructor(boardSize)\n    {\n        if (boardSize !== undefined) {\n            this._boardSize = boardSize\n        }\n\n        this._generateBoard()\n        this._generateLevel()\n        this._generateEnemies()\n    }\n\n    addEntity(entity, x, y)\n    {\n        this._board[x][y].addEntity(entity)\n    }\n\n    getBoxAt(x, y) {\n        return this._board[x][y]\n    }\n\n    getBoard()\n    {\n        return this._board\n    }\n\n    getBoardSize()\n    {\n        return this._boardSize\n    }\n\n    getBoxSize()\n    {\n        return this._boxSize\n    }\n\n    getRandomEmptyBox()\n    {\n        let empty = this._emptyBoxes()\n        let index = this._getRandomInt(empty.length)\n\n        return empty[index]\n    }\n\n    _generateBoard() \n    {\n        for (let x = 0; x < this._boardSize; x++) {\n            for (let y = 0; y < this._boardSize; y++) {\n                if (this._board[x] === undefined) {\n                    this._board[x] = {}\n                }\n\n                let box = new Box()\n                if (x === 0 || y === 0 || x === this._boardSize - 1 || y === this._boardSize - 1) {\n                    box.addEntity(new ConcreteWall())\n                }\n                \n                if (x % 2 === 0 && y % 2 == 0) {\n                    box.addEntity(new ConcreteWall())\n                }\n\n                this._board[x][y] = box\n            }\n        }\n    }\n\n    _generateLevel()\n    {\n        let emptyBoxes = this._emptyBoxes()\n        let count = Math.floor(emptyBoxes.length / 2)\n\n        for (let i = 0; i < count; i++) {\n            let index    = this._getRandomInt(emptyBoxes.length)\n            let position = emptyBoxes[index]\n\n            this._board[position.x][position.y].addEntity(new BrickWall())\n\n            if (i === count - 1) {\n                this._board[position.x][position.y].addEntity(new Door())\n            }\n\n            emptyBoxes.splice(index, 1)\n        }\n    }\n\n    _generateEnemies()\n    {\n        for (let i = 0; i < 1; i++) {\n            let {x, y} = this.getRandomEmptyBox()\n            this.addEntity(new Enemy(), x, y)\n        }\n    }\n\n    _getRandomInt(max) {\n        return Math.floor(Math.random() * max)\n    }\n\n    _emptyBoxes()\n    {\n        let emptyBoxes = []\n        for (let x = 0; x < this._boardSize; x++) {\n            for (let y = 0; y < this._boardSize; y++) {\n                if (this._board[x][y].isEmpty() && !['1-2', '2-1'].includes(`${x}-${y}`)) {\n                    emptyBoxes.push({x, y})\n                }\n            }\n        }\n\n        return emptyBoxes\n    }\n}\n\nmodule.exports = Board","const Entity = require('./Entity')\n\nclass Player extends Entity\n{\n    constructor()\n    {\n        super()\n    }\n}\n\n\nmodule.exports = Player","const Board = require('./lib/Board')\nconst Player = require('./lib/Player')\n\nclass Level extends Phaser.Scene\n{\n    _board = null\n\n    _enemies = []\n\n    constructor()\n    {\n        super({key: \"level\"})\n    }\n\n    init()\n    {\n        this._board = new Board(this.game.config.height / 40)\n        // this._board.addEntity(new Player())\n\n        // this._board.addEntity(new Enemy(), )\n        // this._board.addEntity(new Enemy())\n        // this._board.addEntity(new Enemy())\n    }\n\n    preload()\n    {\n        this.load.spritesheet('player', './assets/Male/Male 01-1.png', {frameWidth: 32, frameHeight: 32})\n        this.load.spritesheet('enemy', './assets/Soldier/Soldier 03-4.png', {frameWidth: 32, frameHeight: 32})\n        this.load.spritesheet('brick-wall', './assets/brick.png', {frameWidth: 40, frameHeight: 40})\n        this.load.spritesheet('concrete-wall', './assets/concrete.png', {frameWidth: 40, frameHeight: 40})\n        this.load.spritesheet('bomb', './assets/bomb.png', {frameWidth: 40, frameHeight: 40})\n    }\n\n    create()\n    {\n        // this.cameras.main.setBackgroundColor('#5c9f1d')\n\n        this.player = this.physics.add.sprite(40 + 32 / 2, 40 + 32 / 2, 'player', 0)\n        // this.bomb = this.physics.add.sprite(40 + 32 / 2, 40 + 32 / 2, 'bomb', 1)\n        \n        this.renderLevel()\n\n        // this.physics.add.collider(this.player, this.enemy, (event) => {\n        //     console.log('colided')\n        // }, null, this)\n\n        this.physics.add.collider(this.player, this.walls, (event) => {\n            // console.log('colided with wall')\n            this.player.anims.pause()\n            this.player.setVelocityY(0)\n            this.player.setVelocityX(0)\n        }, null, this)\n\n\n\t\tthis.player.setCollideWorldBounds({ collides: true })\n\n        this.anims.create({\n            key: 'left',\n            frames: this.anims.generateFrameNumbers('player', {start: 3, end: 5}),\n            repeatw: -1,\n            frameRate: 10\n        })\n\n        this.anims.create({\n            key: 'right',\n            frames: this.anims.generateFrameNumbers('player', {start: 6, end: 8}),\n            repeat: -1,\n            frameRate: 10\n        })\n\n        this.anims.create({\n            key: 'up',\n            frames: this.anims.generateFrameNumbers('player', {start: 9, end: 11}),\n            repeat: -1,\n            frameRate: 10\n        })\n\n        this.anims.create({\n            key: 'down',\n            frames: this.anims.generateFrameNumbers('player', {start: 0, end: 2}),\n            repeat: -1,\n            frameRate: 10\n        })\n\n        this.anims.create({\n            key: 'bomb',\n            frames: this.anims.generateFrameNumbers('bomb', {start: 3, end: 5}),\n            repeatw: -1,\n            frameRate: 5\n        })\n\n        this.key_D = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D)\n        this.key_A = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A)\n        this.key_S = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S)\n        this.key_W = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W)\n        this.key_space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE)\n\n        this.input.keyboard.on(\"keyup\", (event)=> {\n            if (event.key == \"p\") {\n                this.scene.start(\"menu\")\n            }\n        })\n    }\n\n    update(delta)\n    {\n        this.movePlayer()\n    }\n\n    movePlayer() \n    {\n        const speed = 80\n\n        if (this.key_A.isDown) {\n            this.player.setVelocityX(-speed)\n            this.player.anims.play('left', true)\n        } else if (this.key_D.isDown) {\n            this.player.setVelocityX(speed)\n            this.player.anims.play('right', true)\n        } else if (this.key_W.isDown) {\n            this.player.setVelocityY(-speed)\n            this.player.anims.play('up', true)\n        } else if (this.key_S.isDown) {\n            this.player.setVelocityY(speed)\n            this.player.anims.play('down', true)\n        } else if (this.key_space.isDown) {\n            // this.player.setVelocityY(speed)\n            // this.player.anims.play('down', true) \n            console.log(\"bomb deployed\")\n            \n            \n            this.bomb.anims.play('bomb')\n        } else {\n            this.player.anims.pause()\n            this.player.setVelocityY(0)\n            this.player.setVelocityX(0)\n        }\n    }\n\n    renderLevel()\n    {\n        this.walls = this.physics.add.staticGroup()\n        \n        let boxSize = this._board.getBoxSize()\n\n        for (let x = 0; x < this._board.getBoardSize(); x++) {\n            for (let y = 0; y < this._board.getBoardSize(); y++) {\n                let box = this._board.getBoxAt(x, y)\n\n                if (!box.isEmpty()) {\n                    // this.walls.create(x * boxSize + boxSize / 2, y * boxSize + boxSize / 2, box.getTopEntity().texture)\n                    if (box.getTopEntity().texture === 'enemy') {\n                        this._enemies.push(\n                            this.physics.add.sprite(x * boxSize + boxSize / 2, y * boxSize + boxSize / 2, 'enemy', 0)\n                        )\n\n                        this._enemies.map((enemy)=> {\n                            let moves = [ [100, 0], [0, 100], [-100, 0], [0, -100] ]\n                            let index = 0\n\n                            // let dirX = 120\n                            // let dirY = 120\n                            \n                            enemy.setVelocityY(moves[index][0])\n                            enemy.setVelocityX(moves[index][1])\n\n                            this.physics.add.collider(enemy, this.walls, (event) => {\n                                // dirY = -dirY\n                                index++\n                                if (index > moves.length - 1) {\n                                    index = 0 \n                                }\n\n                                enemy.setVelocityY(moves[index][0])\n                                enemy.setVelocityX(moves[index][1])\n                            }, null, this)\n                        })\n\n                    } else {\n                        this.walls.create(x * boxSize + boxSize / 2, y * boxSize + boxSize / 2, box.getTopEntity().texture)\n                    }\n                }\n            }\n        }\n    }\n\n    // createEnemies()\n    // {\n    //     for (let i = 0; i < 5; i++) {\n    //         let box = this._board.getRandomEmptyBox()\n            \n    //         this.enemy = this.physics.add.sprite(\n    //             box.x + this._board.getBoxSize() / 2, \n    //             box.y + this._board.getBoxSize() / 2, \n    //             'enemy', \n    //             0\n    //         )\n    //     }\n    // }\n}\n\nmodule.exports = Level","class Menu extends Phaser.Scene\n{\n    constructor()\n    {\n        super({key: \"menu\"})\n    }\n\n    preload()\n    {\n        // this.load.image('player', './assets/Male/Male 01-1.png')\n    }\n\n    create()\n    {\n        this.add.text(0, 0, \"MENU\", {font: '40px Impact'})\n\n        this.input.keyboard.on(\"keyup\", (event)=> {\n            if (event.key == \"p\") {\n                this.scene.start(\"level\")\n            }\n        })\n    }\n}\n\nmodule.exports = Menu","const Level = require('./Level')\nconst Menu = require('./Menu')\n\nlet config = {\n    type: Phaser.AUTO,\n    width: 840,\n    height: 840,\n    backgroundColor: '#5c9f1d',\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: {\n                x: 0,\n                y: 0,\n            },\n            debug: true,\n            debugShowBody: true,\n            debugShowStaticBody: true,\n        }\n    },\n    scene: [Level, Menu]\n}\n\n\nlet game = new Phaser.Game(config)\n"]}